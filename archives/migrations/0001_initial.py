# Generated by Django 5.2.6 on 2025-09-19 00:33

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('BASIC', 'Basic'), ('SECONDARY', 'Secondary'), ('SCOREKEEPER', 'Scorekeeper'), ('ADMIN', 'Admin')], default='BASIC', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('air_date', models.DateField()),
                ('episode_number', models.IntegerField(choices=[(1, '1'), (2, '2')])),
                ('episode_title', models.CharField(blank=True, max_length=255)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_games', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-air_date', '-episode_number'],
                'unique_together': {('air_date', 'episode_number')},
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('podium_number', models.IntegerField()),
                ('round1_correct', models.BooleanField(null=True)),
                ('round2_correct', models.BooleanField(null=True)),
                ('round3_correct', models.BooleanField(null=True)),
                ('round4_correct', models.BooleanField(null=True)),
                ('round1_score', models.IntegerField(default=0)),
                ('round2_score', models.IntegerField(default=0)),
                ('round3_score', models.IntegerField(default=0)),
                ('round4_score', models.IntegerField(default=0)),
                ('won_tiebreaker', models.BooleanField(default=False)),
                ('fast_line_correct_count', models.IntegerField(blank=True, null=True)),
                ('fast_line_incorrect_count', models.IntegerField(blank=True, null=True)),
                ('fast_line_score', models.IntegerField(default=None, null=True)),
                ('final_round_correct_count', models.IntegerField(blank=True, null=True)),
                ('total_winnings', models.IntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='archives.game')),
            ],
            options={
                'ordering': ['game', 'podium_number'],
                'unique_together': {('game', 'podium_number')},
            },
        ),
    ]
